#     if(dim(annotated_dois_df_load)[1]==1){
#
#       dft=melt(as.list(annotated_dois_df_load))
#       dft=cbind(dft,L2=rep(doi_list[i],dim(dft)[1]))
#       annotated_doi_df=rbind(annotated_doi_df,dft)
#     }
#     #Sys.sleep(time)
#   }
#   return(annotated_doi_df_clean=dcast(annotated_doi_df, L2 ~ L1))
#
# }
#
# library(rcrossref)
#
# annotate_doi_list_cross_ref=function(doi_list){
#   doi_bib=cr_cn(dois = doi_list,"bibentry",.progress = "text")
#
#   doi_bib_df=dcast(melt(doi_bib[-(which(lapply(doi_bib,length)==0))]), L1 ~ L2)
#
#   citation_countdf=cr_citation_count(doi = doi_bib_df$doi)
#
#   doi_bib_df=doi_bib_df%>%dplyr::left_join(citation_countdf,by=c("doi"))
#
#   return(doi_bib_df)
# }
#
#
#
# parse_cite_type=function(citation){
#   get_cite=gsub("\\{\\{[c|C]ite","",as.character(citation))
#   get_cite=gsub("\\{\\{[c|C]ite","",get_cite)
#   get_cite_type=unlist(strsplit(get_cite,"\\|"))[1]
#   get_cite_type=gsub("\\s", "", get_cite_type)
#   get_cite_type=tolower(get_cite_type)
#   return(get_cite_type)
# }
#
# extract_citations=function(art_text){
#   cite_regexp='\\{\\{[c|C]ite.*?\\}\\}'
#
#   #cite
#   cite_fetched=str_match_all(art_text, cite_regexp)
#
#   cite=as.character(unlist(cite_fetched))
#
#   return(cite)#df_cite_revid_art=dplyr::select(article_most_recent_table,art,revid)%>%dplyr::right_join(df_cite,by="revid")
#
# }
#
# extract_wikihypelinks=function(art_text){
#   wiki_regexp='\\[\\[.*?\\]\\]'
#
#   #cite
#   wikihypelinks_fetched=str_match_all(art_text, wiki_regexp)
#
#   wikihypelinks=as.character(unlist(wikihypelinks_fetched))
#
#   return(wikihypelinks)#df_cite_revid_art=dplyr::select(article_most_recent_table,art,revid)%>%dplyr::right_join(df_cite,by="revid")
#
# }
#
#
#
# replace_wikihypelinks=function(art_text){
#   whl=extract_wikihypelinks(art_text)
#   whl_cleaned=gsub("\\[\\[","",whl)
#   whl_cleaned=gsub("\\]\\]","",whl_cleaned)
#
#   whl_cleaned=sapply(whl_cleaned,function(x) as.character(unlist(strsplit(x,"\\|")))[1])
#
#   art_text=mgsub(art_text,whl,whl_cleaned)
#   return(art_text)
#
# }
#
# parse_article_ALL_citations=function(art_text){
#   #art_text=test_content[9]  # OK
#   get_cite=as.character(sapply(extract_citations(art_text),replace_wikihypelinks))
#   cite_types=sapply(get_cite,parse_cite_type)
#   get_cite=gsub("\\{\\{[c|C]ite","",as.character(get_cite))
#   get_cite=gsub("\\{\\{[c|C]ite","",get_cite)
#   get_cite=gsub("\\{\\{","",get_cite)
#   get_cite=gsub("\\}\\}","",get_cite)
#
#   get_cite_subfield=sapply(get_cite, function(x) unlist(strsplit(x,"\\|"))[2:length(unlist(strsplit(x,"\\|")))])
#
#   df_out=data.frame(type=rep(cite_types,lapply(get_cite_subfield,length)),id_cite=rep(1:length(get_cite),lapply(get_cite_subfield,length)),
#                     colsplit(string=unlist(get_cite_subfield), pattern="=", names=c("variable", "value")))
#
#   df_out$variable=gsub(" ","",df_out$variable)
#
#   #dcast(df_out,id_cite~Part1,value.var="Part2")
#   return(df_out)
# }
#
# Get_sci_score=function(art_text){ #  maybe doi vs ref count!
#   extracted_cite=tryCatch(extract_citations(art_text),error = function(e) 0)
#   cite_type=sapply(extracted_cite,parse_cite_type)
#   all_cite_sum= tryCatch(sum(table(cite_type)),error = function(e) 0)
#   journal_cite= tryCatch(table(cite_type)[which(names(table(cite_type))=="journal")],error = function(e) NA)
#   if(length(journal_cite)==0){return(0)}
#   return(as.numeric(as.character(journal_cite/all_cite_sum)))
# }
#
# get_refCount=function(art_text){
#   ref_regexp='<ref.*?</ref>'
#   ref_fetched=str_match_all(art_text, ref_regexp)
#   ref_count=length(as.character(unlist(ref_fetched)))
#   return(as.numeric(as.character(ref_count)))
# }
#
# get_doi_count=function(art_text){
#   doi_regexp= "10\\.\\d{4,9}/[-._;()/:a-z0-9A-Z]+"
#   doi_fetched=str_match_all(art_text, doi_regexp)
#   doi_count=length(as.character(unlist(doi_fetched)))
#   return(as.numeric(as.character(doi_count)))
# }
#
# get_ISBN_count=function(art_text){
#   ISBN_regexp='(?<=(isbn|ISBN)\\s?[=:]?\\s?)\\d{1,5}-\\d{1,7}-\\d{1,5}-[\\dX]'
#   ISBN_fetched=str_match_all(art_text, ISBN_regexp)
#   ISBN_count=length(as.character(unlist(ISBN_fetched)))
#   return(as.numeric(as.character(ISBN_count)))
# }
#
#
# Get_sci_score2=function(art_text){ # Better !
#   #  maybe doi vs ref count!
#   #art_text=test_content[9]
#   ref_regexp='<ref.*?</ref>' # in-text refs!
#   doi_regexp= "10\\.\\d{4,9}/[-._;()/:a-z0-9A-Z]+"
#
#   ref_fetched=str_match_all(art_text, ref_regexp)
#   ref_count=length(as.character(unlist(ref_fetched)))
#
#   doi_fetched=str_match_all(art_text, doi_regexp)
#   doi_count=length(as.character(unlist(doi_fetched)))
#
#   return(as.numeric(as.character(doi_count/ref_count)))
# }
#
# Get_source_type_counts=function(art_text){ # Good!
#   extracted_cite=tryCatch(extract_citations(art_text),error = function(e) 0)
#   cite_type=sapply(extracted_cite,parse_cite_type)
#
#   cite_source_count= tryCatch(table(cite_type),error = function(e) NA)
#   if(length( cite_source_count)==0){return(NA)}
#   return(as.data.frame(cite_source_count))
#
# }
#
load("C:/Users/jsobel/Desktop/Wiki_covid-19/ws.RData")
get_regex_citations_in_wiki_table(article_most_recent_table_sel,doi_regexp)
library(XML)
library(dplyr)
library(reshape)
library(textreuse)
library("xlsx")
library("lubridate")
library(httr)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(WikipediR)
#library(xml2)
library(jsonlite)
library(curl)
library(lubridate) # for working with dates
library(ggplot2)  # for creating graphs
library(scales)   # to access breaks/formatting functions
library(gridExtra) # for arranging plots
library("rcrossref")
library(timevis)
library(Rismed)
library(ggridges)
library("reshape2")
library(stringr)
get_regex_citations_in_wiki_table(article_most_recent_table_sel,doi_regexp)
doi_regexp
head(article_most_recent_table_sel)
article_most_recent_table_sel=dplyr::filter(article_most_recent_table,art %in% art_sci_of_int)
article_most_recent_table_sel$sci_score=as.numeric(as.character(unlist(sapply(article_most_recent_table_sel$`*`,Get_sci_score2))))
article_most_recent_table_sel$sci_score[which(article_most_recent_table_sel$sci_score>1)]=1
get_regex_citations_in_wiki_table(article_most_recent_table_sel,doi_regexp)
head(article_most_recent_table_sel)
head(article_most_recent_table_sel$`*`)[1]
get_regex_citations_in_wiki_table=function(article_wiki_table,citation_regexp){
citation_fetched=str_match_all(article_wiki_table$`*`, citation_regexp)
df_citation=data.frame(revid=rep(article_wiki_table$revid,unlist(lapply(citation_fetched,length))),citation_fetched=unlist(citation_fetched))
df_citation_revid_art=dplyr::select(article_wiki_table,art,revid)%>%dplyr::right_join(df_citation,by="revid")
return(df_citation_revid_art)
}
get_regex_citations_in_wiki_table(article_most_recent_table_sel,doi_regexp)
setwd("C:/Users/jsobel/Desktop/Wiki_covid-19/WikiCitationHistoRy")
setwd("C:/Users/jsobel/Desktop/Wiki_covid-19/WikiCitationHistoRy")
roxygenise()
library("roxygen2")
roxygenise()
vignette("roxygen2")
devtools::document()
devtools::document()
roxygenise()
install("WikiCitationHistoRy")
setwd("C:/Users/jsobel/Desktop/Wiki_covid-19/WikiCitationHistoRy")
library("devtools")
install("WikiCitationHistoRy")
install("WikiCitationHistoRy.r")
install.packages("devtools")
install_github("jsobel1/WikiCitationHistoRy")
library(devtools)
install_github("jsobel1/WikiCitationHistoRy")
install_github("jsobel1/WikiCitationHistoRy")
library("WikiCitationHistoRy")
Zeitgeber_history=get_article_full_history_table("Zeitgeber")
?GET
library("httr")
Zeitgeber_history=get_article_full_history_table("Zeitgeber")
Zeitgeber_history
colnames(Zeitgeber_history)
get_article_initial_table("Zeitgeber")
get_article_info_table("Zeitgeber")
get_article_most_recent_table("Zeitgeber")
setwd("C:/Users/jsobel/Desktop")
tmpwikitable=get_article_initial_table("Zeitgeber")
write_wiki_history_to_xlsx(Zeitgeber_history,"Zeitgeber")
?write.xlsx
??write.xlsx
library("xlsx")
write_wiki_history_to_xlsx(Zeitgeber_history,"Zeitgeber")
library("openxlsx")
write_wiki_history_to_xlsx(Zeitgeber_history,"Zeitgeber")
Category_articles_history=get_category_articles_history(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
colnames(Zeitgeber_history)
install_github("jsobel1/WikiCitationHistoRy")
library("WikiCitationHistoRy")
library("httr")
library("openxlsx")
Category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
get_category_most_recent=function(list_art){
dfn_art=c()
for(art in 1:length(list_art)){
dfn_load=c()
print(list_art[art])
dfn_load=try(get_article_most_recent_table(list_art[art]))
if(length(dfn_load)>1){
dfn_art=rbind(dfn_art,dfn_load)
}
}
return(dfn_art)
}
Category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
Category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
get_category_articles_most_recent=function(list_art){
dfn_art=c()
for(art in 1:length(list_art)){
dfn_load=c()
print(list_art[art])
dfn_load=try(get_article_most_recent_table(list_art[art]))
if(length(dfn_load)>1){
dfn_art=rbind(dfn_art,dfn_load)
}
}
return(dfn_art)
}
Category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
Category_most_recent[1:8]
get_pagename_in_cat("Circadian rhythm")
library(WikipediR)
get_pagename_in_cat("Circadian rhythm")
doi_regexp
print(doi_regexp)
get(doi_regexp)
print(WikiCitationHistoRy:::doi_regexp)
art_test=get_article_most_recent_table("Zeitgeber")
citation_extracted=parse_article_ALL_citations(art_test[9])
??str_match_all
library("stringr")
art_test=get_article_most_recent_table("Zeitgeber")
citation_extracted=parse_article_ALL_citations(art_test[9])
??mgsub
library("mgsub")
art_test=get_article_most_recent_table("Zeitgeber")
citation_extracted=parse_article_ALL_citations(art_test[9])
art_test[9]
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9])
art_test=get_article_most_recent_table("Zeitgeber")
citation_type_extracted=as.character(sapply(extract_citations(art_test[9]),replace_wikihypelinks))
sapply(extract_citations(art_test[9])
extract_citations(art_test[9])
as.character(sapply(extract_citations(art_test[9]),parse_cite_type))
extract_citations(art_test[9])
parse_article_ALL_citations(art_test[9])
get_refCount(art_test[9])
Get_source_type_counts(art_test[9])
export_extracted_citations_xlsx(Category_most_recent,"Category_most_recent")
export_extracted_citations_xlsx=function(article_most_recent_table,name_file_prefix){
for(i in 1:length(regexp_list)){
tmp_table=get_regex_citations_in_wiki_table(article_most_recent_table,as.character(regexp_list[i]))
#tmp_table=tmp_table%>%dplyr::filter(citation!="pmid",citation!="isbn")
#if(i ==1){
try(write.xlsx(tmp_table, file=paste(name_file_prefix,as.character(names(regexp_list)[i]),"exctracted_citations.xlsx",sep="_"),
sheetName=as.character(names(regexp_list)[i]), append=FALSE))
#}else{
# try(write.xlsx(tmp_table, file="Exctracted_citations.xlsx",
#            sheetName=as.character(names(regexp_list)[i]), append=TRUE))
#}
}
}
extract_citations_regexp=function(article_most_recent_table){
extracted_citation_list=list()
for(i in 1:length(regexp_list)){
tmp_table=get_regex_citations_in_wiki_table(article_most_recent_table,as.character(regexp_list[i]))
#tmp_table=tmp_table%>%dplyr::filter(citation!="pmid",citation!="isbn")
extracted_citation_list[[i]]=tmp_table
}
names(extracted_citation_list)=names(regexp_list)
return(extracted_citation_list)
}
export_extracted_citations_xlsx(Category_most_recent,"Category_most_recent")
doi_regexp= "10\\.\\d{4,9}/[-._;()/:a-z0-9A-Z]+" #Good enough
isbn_regexp='(?<=(isbn|ISBN)\\s?[=:]?\\s?)\\d{1,5}-\\d{1,7}-\\d{1,5}-[\\dX]' # good enough
url_regexp = "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
tweet_regexp='\\{\\{cite tweet.*?\\}\\}'
news_regexp='\\{\\{cite news.*?\\}\\}'
journal_regexp='\\{\\{cite journal.*?\\}\\}'
web_regexp='\\{\\{cite web.*?\\}\\}'
article_regexp='\\{\\{cite article.*?\\}\\}'
report_regexp='\\{\\{cite report.*?\\}\\}'
court_regexp='\\{\\{cite court.*?\\}\\}'
press_release_regexp='\\{\\{cite press release.*?\\}\\}'
book_regexp='\\{\\{cite book .*?\\}\\}'
pmid_regexp="(?<=(pmid|PMID)\\s?[=:]\\s?)\\d{5,9}"
ref_regexp='<ref>\\{\\{.*?\\}\\}</ref>' # in-text refs!
cite_regexp='\\{\\{[c|C]ite.*?\\}\\}'
wikihyperlink_regexp='\\[\\[.*?\\]\\]'
template_regexp='\\{\\{pp.*?\\}\\}'
regexp_list=c(
doi_regexp= "10\\.\\d{4,9}/[-._;()/:a-z0-9A-Z]+", #Good enough
isbn_regexp='(?<=(isbn|ISBN)\\s?[=:]?\\s?)\\d{1,5}-\\d{1,7}-\\d{1,5}-[\\dX]', # good enough
url_regexp = "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+",
wikihyperlink_regexp='\\[\\[.*?\\]\\]',
tweet_regexp='\\{\\{cite tweet.*?\\}\\}',
news_regexp='\\{\\{cite news.*?\\}\\}',
journal_regexp='\\{\\{cite journal.*?\\}\\}',
web_regexp='\\{\\{cite web.*?\\}\\}',
article_regexp='\\{\\{cite article.*?\\}\\}',
report_regexp='\\{\\{cite report.*?\\}\\}',
court_regexp='\\{\\{cite court.*?\\}\\}',
press_release_regexp='\\{\\{cite press release.*?\\}\\}',
book_regexp='\\{\\{cite book .*?\\}\\}',
pmid_regexp="(?<=(pmid|PMID)\\s?[=:]\\s?)\\d{5,9}",
ref_regexp='<ref>\\{\\{.*?\\}\\}</ref>', # in-text refs!
cite_regexp='\\{\\{[c|C]ite.*?\\}\\}',
template_regexp='\\{\\{pp.*?\\}\\}'
)
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9]) # Not Working....
export_extracted_citations_xlsx(Category_most_recent,"Category_most_recent")
Get_sci_score(art_test[9])
Get_sci_score2(art_test[9])
Get_source_type_counts(art_test[9])
art_test[1:8]
Get_sci_score(art_test[9])
extract_citations_regexp=function(article_most_recent_table){
extracted_citation_list=list()
for(i in 1:length(regexp_list)){
tmp_table=get_regex_citations_in_wiki_table(article_most_recent_table,as.character(regexp_list[i]))
tmp_table=tmp_table%>%dplyr::filter(citation!="pmid",citation!="isbn")
extracted_citation_list[[i]]=tmp_table
}
names(extracted_citation_list)=names(regexp_list)
return(extracted_citation_list)
}
df_extracted=extract_citations_regexp(Category_most_recent)
extract_citations_regexp=function(article_most_recent_table){
extracted_citation_list=list()
for(i in 1:length(regexp_list)){
tmp_table=get_regex_citations_in_wiki_table(article_most_recent_table,as.character(regexp_list[i]))
#tmp_table=tmp_table%>%dplyr::filter(citation!="pmid",citation!="isbn")
extracted_citation_list[[i]]=tmp_table
}
names(extracted_citation_list)=names(regexp_list)
return(extracted_citation_list)
}
df_extracted=extract_citations_regexp(Category_most_recent)
str(df_extracted)
??mgsub
?mgsub
library(textreuse)
citation_extracted=parse_article_ALL_citations(art_test[9])
library(magrittr)
library(purrr)
#library("mgsub")
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9]) # Not Working....
get_refCount(art_test[9])
library(XML)
library(dplyr)
library(reshape)
library(textreuse)
library("xlsx")
library(httr)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(WikipediR)
#library(xml2)
library(jsonlite)
library(curl)
library(lubridate) # for working with dates
library(ggplot2)  # for creating graphs
library(scales)   # to access breaks/formatting functions
library(gridExtra) # for arranging plots
library("rcrossref")
library(timevis)
library(ggridges)
library("reshape2")
#library(WikiCitationHistoRy)
library("ggrepel")
library(shiny)
library(ggthemes)
library(plotly)
library(stringr)
library("xlsx")
library(reshape2)
library("textclean")
library(purrr)
library(rAltmetric)
library(europepmc)
library(rcrossref)
library(magrittr)
library(purrr)
library(rscopus)
library(dplyr)
library(bibliometrix)
library(visNetwork)
library(geomnet)
library(igraph)
library(dplyr)
library(reshape2)
library("rdatacite")
library(VennDiagram)
library("WikiCitationHistoRy")
library("httr")
library("openxlsx")
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9])
head(citation_extracted)
?mgsub
dim(citation_extracted)
get_pagename_in_cat("Circadian rhythm")
library("stringr")
library("textclean")
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9]) #ok with text clean
library("stringr")
library("textclean")
art_test=get_article_most_recent_table("COVID-19 pandemic")
citation_extracted=parse_article_ALL_citations(art_test[9]) #ok with text clean
citation_type_extracted=as.character(sapply(extract_citations(art_test[9]),parse_cite_type)) # Not Working....
citation_type_extracted
library(WikipediR)
get_pagename_in_cat("Circadian rhythm")
Category_most_recent=get_category_articles_most_recent(get_pagename_in_cat("Circadian rhythm"))
library("WikiCitationHistoRy")
library("httr")
library("openxlsx")
Category_most_recent=get_category_articles_most_recent(get_pagename_in_cat("Circadian rhythm"))
library(devtools)
install_github("jsobel1/WikiCitationHistoRy")
library("WikiCitationHistoRy")
library("httr")
library("openxlsx")
Category_most_recent=get_category_articles_most_recent(get_pagename_in_cat("Circadian rhythm"))
get_article_most_recent_table("Zeitgeber")
category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
get_category_articles_most_recent=function(list_art){
dfn_art=c()
for(art in 1:length(list_art)){
dfn_load=c()
print(list_art[art])
dfn_load=try(get_article_most_recent_table(list_art[art]))
if(length(dfn_load)>1){
dfn_art=rbind(dfn_art,dfn_load)
}
}
return(dfn_art)
}
category_most_recent=get_category_articles_most_recent(c("Zeitgeber","Advanced sleep phase disorder","Sleep deprivation"))
extracted_citation_table=get_regex_citations_in_wiki_table(category_most_recent, "10\\.\\d{4,9}/[-._;()/:a-z0-9A-Z]+") # doi_regexp
extracted_citation_table
parse_article_ALL_citations(art_test[9])
get_paresd_citations=function(article_most_recent_table){
df_cite_clean=c()
for(i in 1:length(article_most_recent_table$revid)){
print(article_most_recent_table$art[i])
dfctmp=try(parse_article_ALL_citations(article_most_recent_table$`*`[i]))
try({
if(dim(dfctmp)[1]>=1){
dfctmp$revid=rep(article_most_recent_table$revid[i],dim(dfctmp)[1])
df_cite_clean=rbind(df_cite_clean,dfctmp)
}
})
}
df_cite_parsed_revid_art=dplyr::select(article_most_recent_table,art,revid)%>%dplyr::right_join(df_cite_clean,by="revid")
#write.table(df_cite_parsed_revid_art,"df_cite_parsed_revid_art.csv",quote = F,row.names = F,sep=";")
return(df_cite_parsed_revid_art)
}
get_paresd_citations(category_most_recent)
paresd_citations=get_paresd_citations(category_most_recent)
head(paresd_citations)
